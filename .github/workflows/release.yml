name: Release to NPM

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: npm-publisher
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build project
        run: pnpm run build:all

      - name: Generate version from commit
        id: version
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags, use the base version as-is
            NEW_VERSION="${BASE_VERSION}"
            NPM_TAG="latest"
          else
            # For other pushes, use timestamped version
            COMMIT_HASH=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_VERSION="${BASE_VERSION}-${TIMESTAMP}-${COMMIT_HASH}"
            NPM_TAG="beta"
          fi
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "npm_tag=${NPM_TAG}" >> $GITHUB_OUTPUT
          echo "Generated version: ${NEW_VERSION} with tag: ${NPM_TAG}"

      - name: Update package.json version
        run: |
          pnpm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Publish to NPM
        run: pnpm publish --tag ${{ steps.version.outputs.npm_tag }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Auto-release for commit ${{ github.sha }}
            
            Install with: `npx ultra-mcp@${{ steps.version.outputs.version }}`
          draft: false
          prerelease: true
          generate_release_notes: true 